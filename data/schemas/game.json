{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Poker Game Configuration Schema",
  "type": "object",
  "definitions": {
    "conditionalState": {
      "type": "object",
      "properties": {
        "type": { 
          "type": "string", 
          "enum": ["all_exposed", "any_exposed", "none_exposed", "board_composition", "player_choice"],
          "description": "Type of condition to check"
        },
        "true_state": { 
          "type": "string",
          "description": "Card state to use if condition is true" 
        },
        "false_state": { 
          "type": "string",
          "description": "Card state to use if condition is false (default 'none' means don't deal)" 
        },
        "subset": {
          "type": "string",
          "description": "Community card subset to check for board composition condition or choice variable name for player_choice"
        },
        "check": {
          "type": "string",
          "enum": ["color", "suit", "rank"],
          "description": "Type of card property to check in board composition"
        },
        "color": {
          "type": "string",
          "enum": ["red", "black"],
          "description": "Card color to check for in board composition"
        },
        "min_count": {
          "type": "integer",
          "minimum": 1,
          "description": "Minimum number of matching cards required for the condition to be true"
        },
        "value": {
          "type": "string",
          "description": "Single value to match for player_choice condition"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of values to match for player_choice condition"
        }
      },
      "required": ["type"],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": { "type": { "enum": ["all_exposed", "any_exposed", "none_exposed"] } }
          },
          "then": {
            "required": ["true_state", "false_state"]
          }
        },
        {
          "if": {
            "properties": { "type": { "enum": ["board_composition"] } }
          },
          "then": {
            "required": ["subset", "true_state", "false_state"]
          }
        },
        {
          "if": {
            "properties": { 
              "type": { "enum": ["board_composition"] },
              "check": { "enum": ["color"] }
            }
          },
          "then": {
            "required": ["check", "color", "min_count"]
          }
        },
        {
          "if": {
            "properties": { 
              "type": { "enum": ["board_composition"] },
              "check": { "enum": ["suit"] }
            }
          },
          "then": {
            "required": ["check", "suits", "min_count"]
          }
        },
        {
          "if": {
            "properties": { "type": { "enum": ["player_choice"] } }
          },
          "then": {
            "required": ["subset"],
            "anyOf": [
              { "required": ["value"] },
              { "required": ["values"] }
            ]
          }
        }
      ]
    },
    "cardSubsetAllowed": {
      "type": "object",
      "properties": {
        "subsets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed subsets of a hand (player or community) for this combination"
        },
        "indices": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of indices for the allowed cards (optional)"
        }
      },
      "required": ["subsets"],
      "additionalProperties": false
    },
    "forcedBetsBase": {
      "type": "object",
      "properties": {
        "style": {
          "type": "string",
          "enum": ["blinds", "bring-in", "antes_only"],
          "description": "Style of forced bets: 'blinds' for small/big blinds, 'bring-in' for Stud bring-in after antes, 'antes_only' for antes without bring-in"
        },
        "rule": {
          "type": "string",
          "enum": ["low card", "high card", "low card al", "high card ah", "high card ah wild"],
          "description": "Rule for determining the bring-in player in 'bring-in' style (e.g., 'low card', 'high card'); ignored for other styles"
        },
        "bringInEval": {
          "type": "string",
          "description": "Evaluation type from bestHand to use for bring-in with 2+ cards in multi-hand games; defaults to first bestHand evaluation if unspecified"
        }
      },
      "required": ["style"],
      "additionalProperties": false
    },
    "forcedBets": {
      "oneOf": [
        {
          "$ref": "#/definitions/forcedBetsBase",
          "description": "Simple forced bets configuration"
        },
        {
          "type": "object",
          "properties": {
            "conditionalOrders": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "condition": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["player_choice"]
                      },
                      "subset": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "values": {
                        "type": "array",
                        "items": {"type": "string"}
                      }
                    },
                    "required": ["type", "subset"],
                    "anyOf": [
                      { "required": ["value"] },
                      { "required": ["values"] }
                    ]
                  },
                  "forcedBet": {
                    "$ref": "#/definitions/forcedBetsBase"
                  }
                },
                "required": ["condition", "forcedBet"]
              }
            },
            "default": {
              "$ref": "#/definitions/forcedBetsBase"
            }
          },
          "required": ["conditionalOrders", "default"],
          "description": "Conditional forced bets configuration based on game state"
        }
      ],
      "description": "Configuration for initial forced bets in the game"
    },
    "bettingOrder": {
      "type": "object",
      "properties": {
        "initial": {
          "type": "string",
          "enum": ["after_big_blind", "bring_in", "dealer", "high_hand"],
          "description": "Determines the starting player for the initial betting round"
        },
        "subsequent": {
          "oneOf": [
            {
              "type": "string",
              "enum": ["high_hand", "dealer", "after_big_blind", "bring_in", "last_actor"],
              "description": "Static subsequent betting order"
            },
            {
              "type": "object",
              "properties": {
                "conditionalOrders": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "condition": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["player_choice"]
                          },
                          "subset": {
                            "type": "string"
                          },
                          "values": {
                            "type": "array",
                            "items": {"type": "string"}
                          }
                        },
                        "required": ["type", "subset", "values"]
                      },
                      "order": {
                        "type": "string",
                        "enum": ["high_hand", "dealer", "after_big_blind", "bring_in"]
                      }
                    },
                    "required": ["condition", "order"]
                  }
                },
                "default": {
                  "type": "string",
                  "enum": ["high_hand", "dealer", "after_big_blind", "bring_in"],
                  "description": "Default order when no conditions match"
                }
              },
              "required": ["conditionalOrders", "default"]
            }
          ]
        }
      },
      "required": ["initial", "subsequent"],
      "additionalProperties": false
    },
    "action": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["split_pot", "best_hand", "evaluate_special"],
          "description": "Type of action to perform"
        },
        "bestHand": {
          "type": "array",
          "items": { "$ref": "#/definitions/bestHandItem" },
          "description": "Alternate hand evaluation rules for 'best_hand' action"
        },
        "evaluation": {
          "type": "object",
          "properties": {
            "criterion": {
              "type": "string",
              "enum": ["highest_rank", "lowest_rank"],
              "description": "Criterion for evaluating cards (e.g., 'highest_rank')"
            },
            "suit": {
              "type": "string",
              "enum": ["clubs", "diamonds", "hearts", "spades", "club", "diamond", "heart", "spade", "joker", "c", "d", "h", "s", "j", "river_card_suit"],
              "description": "Suit to evaluate, or 'river_card_suit' for dynamic suit from river card"
            },
            "from": {
              "type": "string",
              "enum": ["hole_cards", "community_cards"],
              "description": "Source of cards to evaluate"
            },
            "subsets": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Subsets of cards to consider (e.g., ['default'])"
            }
          },
          "required": ["criterion", "from"],
          "additionalProperties": false,
          "description": "Evaluation rules for 'evaluate_special' action"
        }
      },
      "required": ["type"],
      "additionalProperties": false,
      "description": "Action specification with type and optional parameters"
    },      
    "conditionalBestHandCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["community_card_value", "community_card_suit", "board_composition", "player_choice", "player_hand_size"],
          "description": "Type of condition to check"
        },
        "subset": {
          "type": "string",
          "description": "Community card subset to check or choice variable name"
        },
        "values": {
          "type": "array",
          "items": {"type": ["integer", "string"]},
          "description": "Card values that must match for the condition to be true"
        },
        "hand_sizes": {
          "type": "array",
          "items": {"type": "integer"},
          "description": "Player hand sizes that match this condition"
        },
        "min_hand_size": {
          "type": "integer",
          "description": "Minimum hand size for condition to be true"
        },
        "max_hand_size": {
          "type": "integer", 
          "description": "Maximum hand size for condition to be true"
        }
      },
      "required": ["type"],
      "allOf": [
        {
          "if": {
            "properties": {"type": {"enum": ["player_hand_size"]}}
          },
          "then": {
            "anyOf": [
              {"required": ["hand_sizes"]},
              {"required": ["min_hand_size"]},
              {"required": ["max_hand_size"]}
            ]
          }
        }
      ]
    },    
    "bestHandItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the hand type"
        },
        "evaluationType": {
          "type": "string",
          "description": "Type of hand evaluation"
        },
        "holeCards": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": ["remaining","all"]
            }
          ],
          "description": "Number of hole cards required, list of indices, 'remaining' for all remaining cards, or 'all' for all available hole cards"
        },
        "communityCards": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "type": "integer"
            }
          ],
          "description": "Number of community cards required or list of indices"
        },
        "anyCards": {
          "type": "integer",
          "description": "Number of any cards required"
        },
        "hole_subset": {
          "type": "string",
          "description": "Specific subset of hole cards to use for this hand evaluation (e.g., 'Hold'em')"
        },
        "community_subset": {
          "oneOf": [
            {
              "type": "string",
              "description": "Specific subset of community cards to use for this hand evaluation (e.g., 'Board 1')"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of community card subsets to use for this hand evaluation (e.g., ['Flop', 'Turn', 'River'])"
            }
          ],
          "description": "Single subset or list of subsets of community cards to use for hand evaluation"
        },
        "cardState": {
          "type": "string",
          "enum": ["face down", "face up"],
          "description": "Specify the state of the cards to consider for this hand evaluation"
       },               
        "holeCardsAllowed": {
          "type": "array",
          "items": {
              "type": "object",
              "properties": {
                  "hole_subsets": {
                      "type": "array",
                      "items": {"type": "string"},
                      "description": "List of hole card subsets forming a valid hand"
                  }
              },
              "required": ["hole_subsets"]
          }
        },
        "communityCardCombinations": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Name of a community card subset (e.g., 'Board 1', 'Top Flop')"
            },
            "description": "A combination of community card subsets to be used together"
          },
          "description": "List of allowed combinations of community card subsets. Each inner array represents a valid combination of subsets whose cards are combined for hand evaluation."
        },
        "communityCardSelectCombinations": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "string",
                  "description": "Name of a community card subset"
                },
                {
                  "type": "integer",
                  "description": "Minimum number of cards to select from this subset"
                },
                {
                  "type": "integer",
                  "description": "Maximum number of cards to select from this subset (optional)"
                }
              ],
              "minItems": 2,
              "description": "Specification for selecting cards from a subset: [subset_name, min_count, max_count]"
            },
            "description": "A group of subset selections that together form a valid combination"
          },
          "description": "List of combinations where each combination specifies how many cards to select from each subset"
        },        
        "communitySubsetRequirements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "subset": {"type": "string"},
              "count": {"type": "integer", "minimum": 1},
              "required": {"type": "boolean", "default": true}
            },
            "required": ["subset", "count"],
            "additionalProperties": false
          },
          "description": "Require specific numbers of cards from specific community subsets"
        },        
        "classification": {
          "type": "object",
          "properties": {
              "type": {
                  "type": "string",
                  "enum": ["face_butt"],
                  "description": "Type of classification rule"
              },
              "faceRanks": {
                  "type": "array",
                  "items": { "type": "string", "enum": ["JACK", "QUEEN", "KING"] },
                  "description": "Ranks that qualify a hand as 'face'"
              },
              "fieldName": {
                  "type": "string",
                  "description": "Field to store classification result (e.g., 'face_butt')"
              }
            },
            "required": ["type", "faceRanks", "fieldName"],
            "additionalProperties": false
        },     
        "wildCards": {
          "type": "array",
          "description": "List of wild card rules that apply to this hand evaluation",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["joker", "rank", "lowest_community", "lowest_hole", "last_community_card"],
                "description": "Specifies the wild card rule type"
              },
              "count": {
                "type": "integer",
                "description": "Number of wild cards (optional, e.g., number of Jokers)"
              },
              "rank": {
                "type": "string",
                "description": "Rank that is wild (only for type 'rank')"
              },
              "subset": {
                "type": "string",
                "description": "Subset of cards to evaluate (e.g., 'default', 'Board')"
              },
              "visibility": {
                "type": "string",
                "enum": ["face down", "face up"],
                "description": "Visibility condition for lowest_hole (e.g., 'face down')"
              },
              "match": {
                "type": "string",
                "enum": ["rank"],
                "description": "Match condition that defines wild cards (e.g., 'rank')"
              },
              "scope": {
                "type": "string",
                "enum": ["player", "global"],
                "description": "Scope of wildness (default is global)"
              },
              "role": {
                "type": "string",
                "enum": ["wild", "bug", "conditional"],
                "description": "Wildness behavior: 'wild' (any card) or 'bug' (Ace or straight/flush) or 'conditional' (based on condition)"
              },
              "condition": {
                "type": "object",
                "properties": {
                  "visibility": { 
                    "type": "string", 
                    "enum": ["face up", "face down"] 
                  },
                  "true_role": { 
                    "type": "string", 
                    "enum": ["wild", "bug"] 
                  },
                  "false_role": { 
                    "type": "string", 
                    "enum": ["wild", "bug"] 
                  }
                },
                "required": ["visibility", "true_role", "false_role"]
              }              
            },
            "required": ["type", "role"],
            "additionalProperties": false,
            "allOf": [
              {
                "if": {
                  "properties": { "type": { "enum": ["rank"] } }
                },
                "then": {
                  "required": ["rank"]
                }
              },
              {
                "if": {
                  "properties": { "type": { "enum": ["lowest_hole"] } }
                },
                "then": {
                  "required": ["visibility"]
                }
              },
              {
                "if": {
                  "properties": { "type": { "enum": ["last_community_card"] } }
                },
                "then": {
                  "properties": {
                    "match": { "type": "string" },
                    "scope": { "type": "string" }
                  }
                }
              }
            ]            
          }
        },
        "qualifier": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Qualifier for the hand"
        },
        "padding": {
          "type": "boolean",
          "description": "If true, the poker engine pads out the holeCards to the specified length if there are fewer cards"
        },
        "minimumCards": {
          "type": "integer",
          "description": "The minimum number of cards required for the hand to qualify"
        },
        "zeroCardsPipValue": {
          "type": "integer",
          "description": "Pip value assigned to a hand with 0 cards (e.g., 0 for best low in American/Canadian Scarney)"
        },        
        "combinations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "holeCards": {
                "type": "integer",
                "description": "Number of hole cards to use in this combination"
              },
              "communityCards": {
                "type": "integer",
                "description": "Number of community cards to use in this combination"
              },
              "community_subset": {
                "type": "string",
                "description": "Specific subset of community cards to use for this combination"
              }              
            },
            "required": ["holeCards", "communityCards"],
            "additionalProperties": false
          },
          "description": "List of allowed combinations of hole and community cards to form the hand"
        },
        "usesUnusedFrom": {
          "type": "string",
          "description": "Name of the hand configuration from which to use the unused hole cards"
        },
        "playerHandSize": {
          "type": "object",
          "patternProperties": {
            "^[0-9]+$": {
              "type": "object",
              "properties": {
                "holeCards": {
                  "type": "integer",
                  "description": "Number of hole cards to use for this hand size"
                },
                "communityCards": {
                  "type": "integer",
                  "description": "Number of community cards to use for this hand size"
                },
                "community_subset": {
                  "type": "string",
                  "description": "Single community subset to use for this hand size"
                },
                "community_subsets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Multiple community subsets to use for this hand size"
                }
              },
              "required": ["holeCards", "communityCards"],
              "additionalProperties": false
            }
          },
          "description": "Hand evaluation rules based on player's current hand size"
        }        
      },       
      "required": ["evaluationType"],
      "additionalProperties": false
    },
    "bet": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of bet"
        },
        "zeroCardsBetting": {
          "type": "string",
          "enum": ["call_only", "normal"],
          "description": "Betting restriction for players with 0 cards (e.g., 'call_only' for Canadian Scarney)"
        }
      },
      "required": ["type"],
      "additionalProperties": false
    },
    "deal": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the deal (player or community)"
        },
        "conditional_state": {
          "$ref": "#/definitions/conditionalState"
        },   
        "wildCards": {
          "type": "array",
          "description": "List of wild card rules that apply to cards being dealt. Can include static rules (jokers, specific ranks) and dynamic rules (based on cards actually dealt)",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["joker", "rank", "lowest_community", "lowest_hole", "last_community_card"],
                "description": "Specifies the wild card rule type"
              },
              "count": {
                "type": "integer",
                "description": "Number of wild cards (optional, e.g., number of Jokers)"
              },
              "rank": {
                "type": "string",
                "description": "Rank that is wild (only for type 'rank'). Not needed for dynamic types like 'last_community_card'"
              },
              "subset": {
                "type": "string",
                "description": "Subset of cards to evaluate (e.g., 'default', 'Board')"
              },
              "visibility": {
                "type": "string",
                "enum": ["face down", "face up"],
                "description": "Visibility condition for lowest_hole (e.g., 'face down')"
              },
              "match": {
                "type": "string",
                "enum": ["rank", "card", "suit"],
                "description": "Match condition for dynamic wild cards: 'rank' makes all cards of the dealt card's rank wild, 'card' makes only the specific dealt card wild, 'suit' makes all cards of the dealt card's suit wild"
              },
              "scope": {
                "type": "string",
                "enum": ["player", "global"],
                "description": "Scope of wildness: 'player' affects only the current player's cards, 'global' affects all players and community cards (default is global)"
              },
              "role": {
                "type": "string",
                "enum": ["wild", "bug", "conditional"],
                "description": "Wildness behavior: 'wild' (any card) or 'bug' (Ace or straight/flush) or 'conditional' (based on condition)"
              },
              "condition": {
                "type": "object",
                "properties": {
                  "visibility": { 
                    "type": "string", 
                    "enum": ["face up", "face down"] 
                  },
                  "true_role": { 
                    "type": "string", 
                    "enum": ["wild", "bug"] 
                  },
                  "false_role": { 
                    "type": "string", 
                    "enum": ["wild", "bug"] 
                  }
                },
                "required": ["visibility", "true_role", "false_role"]
              }              
            },
            "required": ["type", "role"],
            "additionalProperties": false
          }
        },               
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to deal"
              },
              "state": {
                "type": "string",
                "description": "State of the cards (face up or face down)"
              },
              "protection_option": {
                "type": "object",
                "properties": {
                  "cost": {"type": "string", "description": "Named bet amount"},
                  "timing": {"type": "string", "enum": ["pre_deal", "post_deal"], "default": "post_deal"},
                  "benefit": {"type": "string", "enum": ["flip_face_up"], "default": "flip_face_up"},
                  "prompt": {"type": "string", "description": "Custom prompt text"}
                },
                "required": ["cost"]
              },              
              "community_subset": {
                "description": "Subset of community cards (e.g., 'Board', 'Discard')"
              },
              "subset": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Subset of cards (e.g., 'Board', 'Discard')"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Multiple subsets to assign the card to"
                  }
                ]
              }
            },
            "required": ["number"]
          }
        }
      },
      "required": ["location", "cards"],
      "additionalProperties": false
    },
    "roll_die": {
      "type": "object",
      "properties": {
        "subset": {
          "type": "string",
          "description": "The community card subset where the die result will be stored"
        }
      },
      "additionalProperties": false,
      "description": "Configuration for rolling a die and storing the result as a card"
    },    
    "discard": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "rule": {
                "type": "string",
                "description": "Rule for discarding cards (e.g., 'matching ranks')"
              },
              "subset": { 
                "type": "string",
                "description": "Subset of cards to compare for the discard rule (e.g., 'Discard')"
              },
              "discardLocation": { 
                "type": "string",
                "enum": ["community", "discard_pile"],
                "description": "Where to place discarded cards (e.g., 'community' for Scarney)"
              },
              "discardSubset": { 
                "type": "string",
                "description": "Subset of the discard location to place cards (e.g., 'Discard')"
              },
              "hole_subset": {
                "type": "string",
                "description": "Subset of cards to discard (e.g., 'Hand 1', or 'any' for any subset)"
              },
              "oncePerStep": {
                "type": "boolean",
                "description": "If true, discard happens only once per grouped step",
                "default": false
              },  
              "min_number": {
                "type": "integer",
                "description": "Minimum number of cards that must be drawn"
              },                                       
              "number": {
                "type": "integer",
                "description": "Number of cards to discard"
              },
              "state": {
                "type": "string",
                "description": "State of the discarded cards (face up or face down)"
              },
              "entire_subset": {
                "type": "boolean",
                "description": "If true, the discarded cards must be an entire named subset",
                "default": false
              }                    
            },
            "anyOf": [
              { "required": ["hole_subset"] },
              { "required": ["number"] },
              { "required": ["rule", "subset"] } 
            ],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },
    "draw": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to draw"
              },
              "min_number": {
                "type": "integer",
                "description": "Minimum number of cards that must be drawn"
              },                    
              "state": {
                "type": "string",
                "description": "State of the cards (face up or face down)"
              },
              "hole_subset": {
                "type": "string",
                "description": "Subset of player's hand to draw from/to"
              },
              "draw_amount": {
                "type": "object",
                "properties": {
                  "relative_to": {
                    "type": "string",
                    "enum": ["discard"],
                    "description": "Specifies that the draw amount is relative to the discard amount"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "The difference between the draw amount and the discard amount"
                  }
                },
                "required": ["relative_to", "amount"],
                "additionalProperties": false
              },
              "preserve_state": {
                "type": "boolean",
                "description": "If true, replacement cards maintain the face-up/face-down state of discarded cards"
              }
            },
            "required": ["number", "state"],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },          
    "remove": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Descriptive name of the remove step"
        },
        "type": {
          "type": "string",
          "enum": ["subset"],
          "description": "Type of removal (e.g., 'subset' for community card subsets)"
        },
        "criteria": {
          "type": "string",
          "enum": ["lowest_river_card_unless_all_same"],
          "description": "Criteria for determining which subsets to remove"
        },
        "subsets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of community card subsets to evaluate for removal"
        }
      },
      "required": ["type", "criteria", "subsets"],
      "additionalProperties": false,
      "description": "Remove cards action configuration"
    },
    "expose": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to expose"
              },
              "min_number": { "type": "integer" },
              "state": {
                "type": "string",
                "description": "State of the cards (face up or face down)"
              },
              "immediate": {
                "type": "boolean",
                "description": "If true, cards are exposed immediately rather than at end of round",
                "default": false
              }                
            },
            "required": ["number", "state"],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },
    "pass": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to pass"
              },
              "direction": {
                "type": "string",
                "enum": ["left", "right", "across"],
                "description": "Direction to pass the cards"
              },
              "state": {
                "type": "string",
                "enum": ["face up", "face down"],
                "description": "State of the cards being passed"
              }            
            },
            "required": ["number", "direction", "state"],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },
    "replaceCommunity": {
      "type": "object",
      "properties": {
        "cardsToReplace": {
          "type": "integer",
          "minimum": 1,
          "description": "Number of community cards each player must replace"
        },
        "order": {
          "type": "string",
          "enum": ["clockwise", "counterclockwise"],
          "default": "clockwise",
          "description": "Order in which players replace cards"
        },
        "startingFrom": {
          "type": "string",
          "enum": ["left_of_dealer", "dealer", "small_blind", "big_blind"],
          "default": "left_of_dealer",
          "description": "Which player starts the replacement process"
        }
      },
      "required": ["cardsToReplace"],
      "additionalProperties": false
    },          
    "separate": {
        "type": "object",
        "properties": {
            "cards": {
               "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "hole_subset": { "type": "string" },
                        "number": { "type": "integer" }
                    },
                    "required": ["hole_subset", "number"]
                }
            },
            "visibility_requirements": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "hole_subset": { "type": "string" },
                        "min_face_down": { "type": "integer", "minimum": 0 },
                        "min_face_up": { "type": "integer", "minimum": 0 }
                    },
                    "required": ["hole_subset"]
                },
                "description": "Specifies minimum face-down or face-up cards per subset"
            },
            "hand_comparison": {
              "type": "object",
              "properties": {
                  "subsets": {
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "hole_subset": { "type": "string" },
                              "evaluationType": { "type": "string" }
                          },
                          "required": ["hole_subset", "evaluationType"]
                      },
                      "minItems": 2,
                      "maxItems": 2
                  },
                  "comparison_rule": {
                      "type": "string",
                      "enum": ["greater_than", "less_than", "equal"]
                  }
              },
              "required": ["subsets", "comparison_rule"]
          }            
        },
        "required": ["cards"],
        "additionalProperties": false
    },
    "declare": {
      "type": "object",
      "properties": {
          "type": {
              "type": "string",
              "const": "declare",
              "description": "Action type for player declarations"
          },
          "options": {
              "type": "array",
              "items": {
                  "type": "string",
                  "enum": ["high", "low", "high_low"],
                  "description": "Allowed declaration types"
              },
              "minItems": 1,
              "description": "Possible declarations (e.g., high, low, high/low)"
          },
          "per_pot": {
              "type": "boolean",
              "default": false,
              "description": "If true, players declare separately for each pot (main and side)"
          },
          "simultaneous": {
              "type": "boolean",
              "default": true,
              "description": "If true, declarations are collected simultaneously and revealed at round end"
          }
      },
      "required": ["type", "options"],
      "additionalProperties": false
    }, 
    "choose": {
      "type": "object",
      "properties": {
        "possible_values": {
          "type": "array",
          "items": { 
            "type": "string" 
          },
          "description": "List of possible values that can be chosen"
        },
        "value": {
          "type": "string",
          "description": "Name of variable to store the chosen value"
        },
        "default": {
          "type": "string",
          "description": "Default value if no choice is made"
        },
        "chooser": {
          "type": "string",
          "enum": ["utg", "button", "dealer", "sb", "bb"],
          "description": "Position that gets to make the choice (utg = under the gun)"
        },
        "time_limit": {
          "type": "integer",
          "description": "Time limit in seconds for making the choice"
        }
      },
      "required": ["possible_values", "value"],
      "additionalProperties": false,
      "description": "Configuration for player choice action"
    },    
    "showdown": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of showdown"
        }
      },
      "required": ["type"],
      "additionalProperties": false
    }    
  },  
  "properties": {
    "game": {
      "type": "string",
      "description": "The name of the poker game"
    },
    "references": {
      "type": "array",
      "items": {
        "type": "string",
        "format": "uri"
      },
      "description": "Array of URLs pointing to descriptions or rules of the game"
    },
    "players": {
      "type": "object",
      "properties": {
        "min": {
          "type": "integer",
          "description": "Minimum number of players"
        },
        "max": {
          "type": "integer",
          "description": "Maximum number of players"
        }
      },
      "required": ["min", "max"],
      "additionalProperties": false
    },
    "deck": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["standard", "short_6a", "short_ta", "short_27_ja"],
          "description": "Type of deck: standard, short_6a (2-5 removed), short_ta (2-9 removed)"
        },
        "cards": {
          "type": "integer",
          "enum": [20, 36, 40, 52],
          "description": "Number of cards in the deck"
        },
        "jokers": {
          "type": "integer",
          "description": "Number of jokers in the deck"
        }        
      },
      "required": ["type", "cards"],
      "additionalProperties": false
    },
    "bettingStructures": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of allowed betting structures"
    },
    "forcedBets": {
      "$ref": "#/definitions/forcedBets"
    },   
    "bettingOrder": {
      "$ref": "#/definitions/bettingOrder"
    },     
    "gamePlay": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the gameplay step"
          },
          "conditional_state": {
            "$ref": "#/definitions/conditionalState",
            "description": "Conditional state that determines if this step should be executed"
          },
          "groupedActions": {
            "type": "array",
            "description": "List of actions to execute together for each player in turn order",
            "items": {
              "type": "object",
              "maxProperties": 1,
              "properties": {
                "bet": { "$ref": "#/definitions/bet" },
                "deal": { "$ref": "#/definitions/deal" },
                "discard": { "$ref": "#/definitions/discard" },
                "draw": { "$ref": "#/definitions/draw" },
                "remove": { "$ref": "#/definitions/remove" },
                "expose": { "$ref": "#/definitions/expose" },
                "pass": { "$ref": "#/definitions/pass" },
                "replaceCommunity": { "$ref": "#/definitions/replaceCommunity" },
                "declare": { "$ref": "#/definitions/declare" },
                "separate": { "$ref": "#/definitions/separate" },
                "showdown": { "$ref": "#/definitions/showdown" },
                "roll_die": { "$ref": "#/definitions/roll_die" } 
              },
              "additionalProperties": false
            }
          },          
          "bet": { "$ref": "#/definitions/bet" },
          "deal": { "$ref": "#/definitions/deal" },
          "discard": { "$ref": "#/definitions/discard" },
          "draw": { "$ref": "#/definitions/draw" },
          "remove": { "$ref": "#/definitions/remove" },
          "expose": { "$ref": "#/definitions/expose" },
          "pass": { "$ref": "#/definitions/pass" },
          "replaceCommunity": { "$ref": "#/definitions/replaceCommunity" },
          "declare": { "$ref": "#/definitions/declare" },
          "separate": { "$ref": "#/definitions/separate" },
          "showdown": { "$ref": "#/definitions/showdown" },
          "roll_die": { "$ref": "#/definitions/roll_die" },
          "choose": { "$ref": "#/definitions/choose" }
        },
        "oneOf": [
          { "required": ["name", "groupedActions"] },
          { "required": ["name"], "properties": { "groupedActions": { "not": {} } } }
        ],
        "additionalProperties": false
      }
    },
    "showdown": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": "Order of showdown"
        },
        "startingFrom": {
          "type": "string",
          "description": "Player starting the showdown"
        },
        "cardsRequired": {
          "type": "string",
          "description": "Description of cards required for showdown"
        },
        "bestHand": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bestHandItem"
          }
        },
        "conditionalBestHands": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "condition": {"$ref": "#/definitions/conditionalBestHandCondition"},
              "bestHand": {
                "type": "array",
                "items": {"$ref": "#/definitions/bestHandItem"}
              }
            },
            "required": ["condition", "bestHand"],
            "additionalProperties": false
          },
          "description": "Conditional best hand configurations based on game state"
        },
        "defaultBestHand": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bestHandItem"
          },
          "description": "Default best hand configuration when no condition matches"
        },        
        "classification_priority": {
          "type": "array",
          "items": { "type": "string", "enum": ["face", "butt"] },
          "description": "Order of precedence for classified hands (e.g., ['face', 'butt'])"
        },
        "declaration_mode": {
          "type": "string",
          "enum": ["cards_speak", "declare"],
          "default": "cards_speak",
          "description": "Whether showdown uses declarations or cards speak"
        },                
        "globalDefaultAction": {
          "type": "object",
          "properties": {
            "condition": {
              "type": "string",
              "enum": ["no_qualifier_met"],
              "description": "Condition under which the global default action is applied"
            },
            "action": {
              "$ref": "#/definitions/action",
              "description": "Action to take when the condition is met"
            }
          },
          "required": ["condition", "action"],
          "additionalProperties": false,
          "description": "Global default action applied when no hand configurations have winners"
        },
        "defaultActions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "condition": {
                "type": "string",
                "enum": ["no_qualifier_met"],
                "description": "Condition under which this default action is applied"
              },
              "appliesTo": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Names of bestHand configurations this action applies to"
              },
              "action": {
                "$ref": "#/definitions/action",
                "description": "Action to take when the condition is met for the specified configurations"
              }
            },
            "required": ["condition", "appliesTo", "action"],
            "additionalProperties": false
          },
          "description": "List of per-configuration default actions applied when specific qualifiers are not met"
        }      
      },
      "required": ["order", "startingFrom", "cardsRequired"],
      "anyOf": [
        { "required": ["bestHand"] },
        { "required": ["conditionalBestHands"] }
      ],     
      "additionalProperties": false
    }
  },
  "required": ["game", "players", "deck", "bettingStructures", "gamePlay", "showdown"],
  "additionalProperties": false
}