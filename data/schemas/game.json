{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Poker Game Configuration Schema",
  "type": "object",
  "definitions": {
    "cardSubsetAllowed": {
      "type": "object",
      "properties": {
        "subsets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of allowed subsets of a hand (player or community) for this combination"
        },
        "indices": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of indices for the allowed cards (optional)"
        }
      },
      "required": ["subsets"],
      "additionalProperties": false
    },
    "forcedBets": {
      "type": "object",
      "properties": {
        "style": {
          "type": "string",
          "enum": ["blinds", "bring-in", "antes_only"],
          "description": "Style of forced bets: 'blinds' for small/big blinds, 'bring-in' for Stud bring-in after antes, 'antes_only' for antes without bring-in"
        },
        "rule": {
          "type": "string",
          "enum": ["low card", "high card"],
          "description": "Rule for determining the bring-in player in 'bring-in' style (e.g., 'low card', 'high card'); ignored for other styles"
        },
        "bringInEval": {
          "type": "string",
          "description": "Evaluation type from bestHand to use for bring-in with 2+ cards in multi-hand games; defaults to first bestHand evaluation if unspecified"
        }
      },
      "required": ["style"],
      "additionalProperties": false,
      "description": "Configuration for initial forced bets in the game"
    },
    "bettingOrder": {
      "type": "object",
      "properties": {
        "initial": {
          "type": "string",
          "enum": ["after_big_blind", "bring_in", "dealer"],
          "description": "Determines the starting player for the initial betting round: 'after_big_blind' (left of big blind), 'bring_in' (bring-in player), 'dealer' (left of dealer)"
        },
        "subsequent": {
          "type": "string",
          "enum": ["high_hand", "dealer"],
          "description": "Determines the starting player for subsequent betting rounds: 'high_hand' (highest visible hand), 'dealer' (left of dealer or first active player)"
        }
      },
      "required": ["initial", "subsequent"],
      "additionalProperties": false,
      "description": "Rules for determining the starting player for each betting round; defaults based on forcedBets if omitted"
    },    
    "action": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["split_pot", "best_hand", "evaluate_special"],
          "description": "Type of action to perform"
        },
        "bestHand": {
          "type": "array",
          "items": { "$ref": "#/definitions/bestHandItem" },
          "description": "Alternate hand evaluation rules for 'best_hand' action"
        },
        "evaluation": {
          "type": "object",
          "properties": {
            "criterion": {
              "type": "string",
              "enum": ["highest_rank", "lowest_rank"],
              "description": "Criterion for evaluating cards (e.g., 'highest_rank')"
            },
            "suit": {
              "type": "string",
              "enum": ["clubs", "diamonds", "hearts", "spades", "club", "diamond", "heart", "spade", "joker", "c", "d", "h", "s", "j", "river_card_suit"],
              "description": "Suit to evaluate, or 'river_card_suit' for dynamic suit from river card"
            },
            "from": {
              "type": "string",
              "enum": ["hole_cards", "community_cards"],
              "description": "Source of cards to evaluate"
            },
            "subsets": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Subsets of cards to consider (e.g., ['default'])"
            }
          },
          "required": ["criterion", "from"],
          "additionalProperties": false,
          "description": "Evaluation rules for 'evaluate_special' action"
        }
      },
      "required": ["type"],
      "additionalProperties": false,
      "description": "Action specification with type and optional parameters"
    },      
    "bestHandItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the hand type"
        },
        "evaluationType": {
          "type": "string",
          "description": "Type of hand evaluation"
        },
        "holeCards": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": ["remaining","all"]
            }
          ],
          "description": "Number of hole cards required, list of indices, 'remaining' for all remaining cards, or 'all' for all available hole cards"
        },
        "communityCards": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "type": "integer"
            }
          ],
          "description": "Number of community cards required or list of indices"
        },
        "anyCards": {
          "type": "integer",
          "description": "Number of any cards required"
        },
        "hole_subset": {
          "type": "string",
          "description": "Specific subset of hole cards to use for this hand evaluation (e.g., 'Hold'em')"
        },
        "community_subset": {
          "type": "string",
          "description": "Specific subset of community cards to use for this hand evaluation (e.g., 'Board 1')"
        },        
        "holeCardsAllowed": {
          "type": "array",
          "items": {
              "type": "object",
              "properties": {
                  "hole_subsets": {
                      "type": "array",
                      "items": {"type": "string"},
                      "description": "List of hole card subsets forming a valid hand"
                  }
              },
              "required": ["hole_subsets"]
          }
        },
        "communityCardCombinations": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Name of a community card subset (e.g., 'Board 1', 'Top Flop')"
            },
            "description": "A combination of community card subsets to be used together"
          },
          "description": "List of allowed combinations of community card subsets. Each inner array represents a valid combination of subsets whose cards are combined for hand evaluation."
        },
        "wildCards": {
          "type": "array",
          "description": "List of wild card rules that apply to this hand evaluation",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["joker", "rank", "lowest_community", "lowest_hole"],
                "description": "Specifies the wild card rule type"
              },
              "count": {
                "type": "integer",
                "description": "Number of wild cards (optional, e.g., number of Jokers)"
              },
              "rank": {
                "type": "string",
                "description": "Rank that is wild (only for type 'rank')"
              },
              "subset": {
                "type": "string",
                "description": "Subset of cards to evaluate (e.g., 'default', 'Board')"
              },
              "visibility": {
                "type": "string",
                "enum": ["face down", "face up"],
                "description": "Visibility condition for lowest_hole (e.g., 'face down')"
              },
              "match": {
                "type": "string",
                "enum": ["rank"],
                "description": "Match condition that defines wild cards (e.g., 'rank')"
              },
              "scope": {
                "type": "string",
                "enum": ["player", "global"],
                "description": "Scope of wildness (default is global)"
              },
              "role": {
                "type": "string",
                "enum": ["wild", "bug"],
                "description": "Wildness behavior: 'wild' (any card) or 'bug' (Ace or straight/flush)"
              }
            },
            "required": ["type", "role"],
            "additionalProperties": false
          }
        },
        "qualifier": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Qualifier for the hand"
        },
        "padding": {
          "type": "boolean",
          "description": "If true, the poker engine pads out the holeCards to the specified length if there are fewer cards"
        },
        "minimumCards": {
          "type": "integer",
          "description": "The minimum number of cards required for the hand to qualify"
        },
        "zeroCardsPipValue": {
          "type": "integer",
          "description": "Pip value assigned to a hand with 0 cards (e.g., 0 for best low in American/Canadian Scarney)"
        },        
        "combinations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "holeCards": {
                "type": "integer",
                "description": "Number of hole cards to use in this combination"
              },
              "communityCards": {
                "type": "integer",
                "description": "Number of community cards to use in this combination"
              }
            },
            "required": ["holeCards", "communityCards"],
            "additionalProperties": false
          },
          "description": "List of allowed combinations of hole and community cards to form the hand"
        },
        "usesUnusedFrom": {
          "type": "string",
          "description": "Name of the hand configuration from which to use the unused hole cards"
        }
      },       
      "required": ["evaluationType"],
      "additionalProperties": false
    },
    "bet": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of bet"
        },
        "zeroCardsBetting": {
          "type": "string",
          "enum": ["call_only", "normal"],
          "description": "Betting restriction for players with 0 cards (e.g., 'call_only' for Canadian Scarney)"
        }
      },
      "required": ["type"],
      "additionalProperties": false
    },
    "deal": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "Location of the deal (player or community)"
        },
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to deal"
              },
              "state": {
                "type": "string",
                "description": "State of the cards (face up or face down)"
              },
              "community_subset": {
                "description": "Subset of community cards (e.g., 'Board', 'Discard')"
              },
              "subset": {
                "type": "string",
                "description": "Subset of cards (e.g., 'Board', 'Discard')"
              }
            },
            "required": ["number", "state"]
          }
        }
      },
      "required": ["location", "cards"],
      "additionalProperties": false
    },
    "discard": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "rule": {
                "type": "string",
                "description": "Rule for discarding cards (e.g., 'matching ranks')"
              },
              "subset": { 
                "type": "string",
                "description": "Subset of cards to compare for the discard rule (e.g., 'Discard')"
              },
              "discardLocation": { 
                "type": "string",
                "enum": ["community", "discard_pile"],
                "description": "Where to place discarded cards (e.g., 'community' for Scarney)"
              },
              "discardSubset": { 
                "type": "string",
                "description": "Subset of the discard location to place cards (e.g., 'Discard')"
              },
              "hole_subset": {
                "type": "string",
                "description": "Subset of cards to discard (e.g., 'Hand 1', or 'any' for any subset)"
              },
              "oncePerStep": {
                "type": "boolean",
                "description": "If true, discard happens only once per grouped step",
                "default": false
              },  
              "min_number": {
                "type": "integer",
                "description": "Minimum number of cards that must be drawn"
              },                                       
              "number": {
                "type": "integer",
                "description": "Number of cards to discard"
              },
              "state": {
                "type": "string",
                "description": "State of the discarded cards (face up or face down)"
              },
              "entire_subset": {
                "type": "boolean",
                "description": "If true, the discarded cards must be an entire named subset",
                "default": false
              }                    
            },
            "anyOf": [
              { "required": ["hole_subset"] },
              { "required": ["number"] },
              { "required": ["rule", "subset"] } 
            ],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },
    "draw": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to draw"
              },
              "min_number": {
                "type": "integer",
                "description": "Minimum number of cards that must be drawn"
              },                    
              "state": {
                "type": "string",
                "description": "State of the cards (face up or face down)"
              },
              "hole_subset": {
                "type": "string",
                "description": "Subset of player's hand to draw from/to"
              },
              "draw_amount": {
                "type": "object",
                "properties": {
                  "relative_to": {
                    "type": "string",
                    "enum": ["discard"],
                    "description": "Specifies that the draw amount is relative to the discard amount"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "The difference between the draw amount and the discard amount"
                  }
                },
                "required": ["relative_to", "amount"],
                "additionalProperties": false
              }
            },
            "required": ["number", "state"],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },          
    "remove": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Descriptive name of the remove step"
        },
        "type": {
          "type": "string",
          "enum": ["subset"],
          "description": "Type of removal (e.g., 'subset' for community card subsets)"
        },
        "criteria": {
          "type": "string",
          "enum": ["lowest_river_card_unless_all_same"],
          "description": "Criteria for determining which subsets to remove"
        },
        "subsets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of community card subsets to evaluate for removal"
        }
      },
      "required": ["type", "criteria", "subsets"],
      "additionalProperties": false,
      "description": "Remove cards action configuration"
    },
    "expose": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to expose"
              },
              "state": {
                "type": "string",
                "description": "State of the cards (face up or face down)"
              }
            },
            "required": ["number", "state"],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },
    "pass": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of cards to pass"
              },
              "direction": {
                "type": "string",
                "enum": ["left", "right", "across"],
                "description": "Direction to pass the cards"
              },
              "state": {
                "type": "string",
                "enum": ["face up", "face down"],
                "description": "State of the cards being passed"
              }
            },
            "required": ["number", "direction", "state"],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },          
    "separate": {
      "type": "object",
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "hole_subset": {
                "type": "string",
                "description": "Name of the subset"
              },
              "number": {
                "type": "integer",
                "description": "Number of cards in the subset"
              }
            },
            "required": ["hole_subset", "number"],
            "additionalProperties": false
          }
        }
      },
      "required": ["cards"],
      "additionalProperties": false
    },
    "showdown": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of showdown"
        }
      },
      "required": ["type"],
      "additionalProperties": false
    }    
  },  
  "properties": {
    "game": {
      "type": "string",
      "description": "The name of the poker game"
    },
    "references": {
      "type": "array",
      "items": {
        "type": "string",
        "format": "uri"
      },
      "description": "Array of URLs pointing to descriptions or rules of the game"
    },
    "players": {
      "type": "object",
      "properties": {
        "min": {
          "type": "integer",
          "description": "Minimum number of players"
        },
        "max": {
          "type": "integer",
          "description": "Maximum number of players"
        }
      },
      "required": ["min", "max"],
      "additionalProperties": false
    },
    "deck": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["standard", "short_6a", "short_ta"],
          "description": "Type of deck: standard, short_6a (2-5 removed), short_ta (2-9 removed)"
        },
        "cards": {
          "type": "integer",
          "enum": [20, 36, 52],
          "description": "Number of cards in the deck"
        },
        "jokers": {
          "type": "integer",
          "description": "Number of jokers in the deck"
        }        
      },
      "required": ["type", "cards"],
      "additionalProperties": false
    },
    "bettingStructures": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of allowed betting structures"
    },
    "forcedBets": {
      "$ref": "#/definitions/forcedBets"
    },   
    "bettingOrder": {
      "$ref": "#/definitions/bettingOrder"
    },     
    "gamePlay": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the gameplay step"
          },
          "groupedActions": {
            "type": "array",
            "description": "List of actions to execute together for each player in turn order",
            "items": {
              "type": "object",
              "maxProperties": 1,
              "properties": {
                "bet": { "$ref": "#/definitions/bet" },
                "deal": { "$ref": "#/definitions/deal" },
                "discard": { "$ref": "#/definitions/discard" },
                "draw": { "$ref": "#/definitions/draw" },
                "remove": { "$ref": "#/definitions/remove" },
                "expose": { "$ref": "#/definitions/expose" },
                "pass": { "$ref": "#/definitions/pass" },
                "separate": { "$ref": "#/definitions/separate" },
                "showdown": { "$ref": "#/definitions/showdown" }
              },
              "additionalProperties": false
            }
          },          
          "bet": { "$ref": "#/definitions/bet" },
          "deal": { "$ref": "#/definitions/deal" },
          "discard": { "$ref": "#/definitions/discard" },
          "draw": { "$ref": "#/definitions/draw" },
          "remove": { "$ref": "#/definitions/remove" },
          "expose": { "$ref": "#/definitions/expose" },
          "pass": { "$ref": "#/definitions/pass" },
          "separate": { "$ref": "#/definitions/separate" },
          "showdown": { "$ref": "#/definitions/showdown" }
        },
        "oneOf": [
          { "required": ["name", "groupedActions"] },
          { "required": ["name"], "properties": { "groupedActions": { "not": {} } } }
        ],
        "additionalProperties": false
      }
    },
    "showdown": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": "Order of showdown"
        },
        "startingFrom": {
          "type": "string",
          "description": "Player starting the showdown"
        },
        "cardsRequired": {
          "type": "string",
          "description": "Description of cards required for showdown"
        },
        "bestHand": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bestHandItem"
          }
        },
        "globalDefaultAction": {
          "type": "object",
          "properties": {
            "condition": {
              "type": "string",
              "enum": ["no_qualifier_met"],
              "description": "Condition under which the global default action is applied"
            },
            "action": {
              "$ref": "#/definitions/action",
              "description": "Action to take when the condition is met"
            }
          },
          "required": ["condition", "action"],
          "additionalProperties": false,
          "description": "Global default action applied when no hand configurations have winners"
        },
        "defaultActions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "condition": {
                "type": "string",
                "enum": ["no_qualifier_met"],
                "description": "Condition under which this default action is applied"
              },
              "appliesTo": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Names of bestHand configurations this action applies to"
              },
              "action": {
                "$ref": "#/definitions/action",
                "description": "Action to take when the condition is met for the specified configurations"
              }
            },
            "required": ["condition", "appliesTo", "action"],
            "additionalProperties": false
          },
          "description": "List of per-configuration default actions applied when specific qualifiers are not met"
        }      
      },
      "required": ["order", "startingFrom", "cardsRequired", "bestHand"],
      "additionalProperties": false
    }
  },
  "required": ["game", "players", "deck", "bettingStructures", "gamePlay", "showdown"],
  "additionalProperties": false
}
